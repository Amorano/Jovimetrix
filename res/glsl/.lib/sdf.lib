//------------------------------------------------------------------------------
// SIGNED DISTANCE
//------------------------------------------------------------------------------

float lib_sdf_polygon2D(vec2 p, vec2 center, float radius, int sides, float starFactor);
float lib_sdf_star2D(vec2 p, float r, float t);
float lib_sdf_heart2D(vec2 p);
float lib_sdf_ellipse2D(vec2 p, vec2 radii);
float lib_sdf_circle2D(vec2 p, float r);

//------------------------------------------------------------------------------
// SUPPORT FUNCTIONS
//------------------------------------------------------------------------------

float lib_sdf_union(float d1, float d2);
float lib_sdf_subtract(float d1, float d2);
float lib_sdf_round(vec2 s, float r);
float lib_sdf_hollow(vec2 s, float thickness);
vec3 lib_sdf_hollow(vec3 shape, float r);

//------------------------------------------------------------------------------
// SHAPE
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// CUBE
//------------------------------------------------------------------------------

// Signed distance box of size radius
float lib_sdf_box(vec2 p, vec2 radius)
{
    vec2 d = abs(p)-radius;
    return length(max(d,0.0)) + min(maxcomp(d),0.0);
}

float lib_sdf_box(vec3 p, vec3 radius)
{
    vec2 d = abs(p)-radius;
    return length(max(d,0.0)) + min(maxcomp(d),0.0);
}

float lib_sdf_box(vec4 p, vec4 radius)
{
    vec2 d = abs(p)-radius;
    return length(max(d,0.0)) + min(maxcomp(d),0.0);
}

// Computes the signed distance from a point to a sphere
float lib_sdf_sphere(vec3 p, float r) {
    return length(p) - r;
}

float lib_sdf_cylinder(vec3 p, float r, float h) {
    vec2 d = vec2(length(p.xy) - r, abs(p.z) - h * 0.5);
    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);
}





float lib_sdf_polygon(vec2 p, vec2 center, float r, int sides, float starFactor) {
    float angle = M_TAU / float(sides);
    float dist = 1e30; // Initialize to a large value

    for (int i = 0; i < sides; ++i) {
        // Calculate the vertices of the polygon
        float a = angle * float(i);
        vec2 v0 = center + vec2(cos(a), sin(a)) * r;
        vec2 v1 = center + vec2(cos(a + angle), sin(a + angle)) * r;

        // Calculate the distance from the point to the edge of the polygon
        vec2 edge = v1 - v0;
        vec2 toPoint = p - v0;
        float t = clamp(dot(toPoint, edge) / dot(edge, edge), 0.0, 1.0);
        vec2 closest = v0 + t * edge;
        float edgeDistance = length(p - closest);

        // Modulate the radius for star effect
        float factor = 1.0 + starFactor * (mod(float(i), 2.0) * 2.0 - 1.0);
        float distance = edgeDistance - r * factor;

        // Update the minimum distance
        dist = min(dist, distance);
    }
    return dist;
}

float lib_sdf_ellipse(vec2 p, vec2 radii) {
    vec2 q = abs(p) - radii;
    return length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);
}

float lib_sdf_circle(vec2 p, float r) {
    return length(p) - r;
}

float lib_sdf_star(vec2 p, float r, float t) {
    float theta = atan(p.y, p.x);
    float radius = length(p);
    float angle = mod(theta, M_TAU / max(1., t));
    float innerRadius = r * (1.0 - 0.5);
    float outerRadius = r * (1.0 + 0.5);
    float d = length(vec2(radius - innerRadius, angle - M_PI / t)) - (outerRadius - innerRadius);
    return d;
}

float lib_sdf_heart(vec2 p) {
    float x = p.x;
    float y = p.y;
    float a = 1.0 - x * x - (5.0 * y / 4.0 - sqrt(abs(x))) * (5.0 * y / 4.0 - sqrt(abs(x)));
    return length(vec2(x, y - sqrt(abs(x))) - vec2(0.0, 0.5)) * (abs(a) - 0.5);
}

//------------------------------------------------------------------------------
// TRANSFORMATION
//------------------------------------------------------------------------------

// Repeats the space with periodic boundary conditions
vec3 lib_sdf_repeat(vec3 p, vec3 c) {
    return mod(p, c) - 0.5 * c;
}

// Union of two distances
float lib_sdf_union(float d1, float d2) {
    return min(d1, d2);
}

// Smooth union of two distances
float lib_sdf_unionSmooth(float a, float b, float k) {
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return mix(b, a, h) - k * h * (1.0 - h);
}

// Intersection of two distances
float lib_sdf_intersection(float d1, float d2) {
    return max(d1, d2);
}

// Subtraction of two distances
float lib_sdf_difference(float d1, float d2) {
    return max(d1, -d2);
}

float lib_sdf_hollow2(vec2 s, float thickness) {
    return abs(s) - thickness;
}

vec3 lib_sdf_hollow3(vec3 shape, float r) {
    return vec3(abs(shape.x) - r, sign(shape.x) * shape.yz);
}

// Displacement effect using sine functions
float lib_sdf_displacement(vec3 p) {
    return sin(p.x) * sin(p.y) * sin(p.z);
}

// Applies a twisting transformation to a point
vec3 lib_sdf_twist(vec3 p, float a) {
    float c = cos(a * p.y);
    float s = sin(a * p.y);
    mat2 m = mat2(c, -s, s, c);
    return vec3(m * p.xz, p.y);
}

//------------------------------------------------------------------------------
// RAY INTERSECTION
//------------------------------------------------------------------------------

// Computes ray-box intersection and returns true if intersection occurs
bool lib_intersection_aabb(vec3 o, vec3 dir, vec3 bmin, vec3 bmax, inout vec2 e) {
    vec3 a = (bmin - o) / dir;
    vec3 b = (bmax - o) / dir;
    vec3 s = min(a, b);
    vec3 t = max(a, b);
    e.x = max(max(s.x, s.y), max(s.z, e.x));
    e.y = max(min(t.x, t.y), max(t.z, e.y));
    return e.x < e.y;
}

//------------------------------------------------------------------------------
// DISTANCE FIELD
//------------------------------------------------------------------------------

// Computes the distance field for a given point
// Optionally applies transformations and combines multiple distance functions
float dist_field(vec3 p) {
    // Uncomment transformations to apply
    // p = sdRep(p, vec3(4.0));
    // p = sdTwist(p, 3.0);

    // Compute distances to box and sphere
    float d0 = lib_sdf_box(p, vec3(0.5));
    float d1 = lib_sdf_sphere(p, 0.6);

    // Combine distances using intersection
    return lib_sdf_intersection(d1, d0);

    // Optionally include displacement and smooth union
    // return d + sfDisp(p * 2.5);
    // return sdUnion_s(d + sfDisp(p * 2.5 * sin(iTime * 1.01)), d1, 0.1);
}


//------------------------------------------------------------------------------
// GRADIENT FUNCTION
//------------------------------------------------------------------------------

// Computes the gradient of the distance field at a point
vec3 gradient(vec3 pos) {
    const vec3 dx = vec3(grad_step, 0.0, 0.0);
    const vec3 dy = vec3(0.0, grad_step, 0.0);
    const vec3 dz = vec3(0.0, 0.0, grad_step);
    return normalize(
        vec3(
            dist_field(pos + dx) - dist_field(pos - dx),
            dist_field(pos + dy) - dist_field(pos - dy),
            dist_field(pos + dz) - dist_field(pos - dz)
        )
    );
}

//------------------------------------------------------------------------------
// RAY MARCHING
//------------------------------------------------------------------------------

// Performs ray marching to find the intersection with a distance field
bool ray_marching(vec3 o, vec3 dir, inout float depth, inout vec3 n) {
    float t = 0.0;
    float d = 10000.0;
    float dt = 0.0;
    for (int i = 0; i < 128; i++) {
        vec3 v = o + dir * t;
        d = dist_field(v);
        if (d < 0.001) {
            break;
        }
        dt = min(abs(d), 0.1);
        t += dt;
        if (t > depth) {
            break;
        }
    }

    if (d >= 0.001) {
        return false;
    }

    t -= dt;
    for (int i = 0; i < 4; i++) {
        dt *= 0.5;
        vec3 v = o + dir * (t + dt);
        if (dist_field(v) >= 0.001) {
            t += dt;
        }
    }

    depth = t;
    n = normalize(gradient(o + dir * t));
    return true;
}
