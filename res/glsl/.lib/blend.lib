//------------------------------------------------------------------------------
// COLOR
//------------------------------------------------------------------------------

#include .lib/const.lib
#include .lib/convert.lib
#include .lib/color.lib

// =============================================================================
// PROTOTYPES
// =============================================================================

vec3 blend_overlay(vec3 base, vec3 blend);
vec3 blend_softLight(vec3 base, vec3 blend);
vec3 blend_multiply(vec3 base, vec3 blend);
vec3 blend_screen(vec3 base, vec3 blend);
vec3 blend_darken(vec3 base, vec3 blend);
vec3 blend_lighten(vec3 base, vec3 blend);
vec3 blend_colorDodge(vec3 base, vec3 blend);
vec3 blend_colorBurn(vec3 base, vec3 blend);
vec3 blend_hardLight(vec3 base, vec3 blend);
vec3 blend_vividLight(vec3 base, vec3 blend);
vec3 blend_linearLight(vec3 base, vec3 blend);
vec3 blend_pinLight(vec3 base, vec3 blend);
vec3 blend_hardMix(vec3 base, vec3 blend);
vec3 blend_difference(vec3 base, vec3 blend);
vec3 blend_exclusion(vec3 base, vec3 blend);
vec3 blend_subtract(vec3 base, vec3 blend);
vec3 blend_divide(vec3 base, vec3 blend);
vec3 blend_hue(vec3 base, vec3 blend);
vec3 blend_saturation(vec3 base, vec3 blend);
vec3 blend_color(vec3 base, vec3 blend);
vec3 blend_luminosity(vec3 base, vec3 blend);

//------------------------------------------------------------------------------
// BLENDING
//------------------------------------------------------------------------------

vec3 blend_overlay(vec3 base, vec3 blend) {
    return mix(
        2.0 * base * blend,
        1.0 - 2.0 * (1.0 - base) * (1.0 - blend),
        step(0.5, base)
    );
}

vec3 blend_softLight(vec3 base, vec3 blend) {
    return mix(
        2.0 * base * blend + base * base * (1.0 - 2.0 * blend),
        sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend),
        step(0.5, blend)
    );
}

vec3 blend_multiply(vec3 base, vec3 blend) {
    return base * blend;
}

vec3 blend_screen(vec3 base, vec3 blend) {
    return 1.0 - (1.0 - base) * (1.0 - blend);
}

vec3 blend_darken(vec3 base, vec3 blend) {
    return min(base, blend);
}

vec3 blend_lighten(vec3 base, vec3 blend) {
    return max(base, blend);
}

vec3 blend_colorDodge(vec3 base, vec3 blend) {
    vec3 ones = vec3(1.0);
    return mix(
        ones,
        min(ones, base / (ones - blend)),
        step(blend, vec3(0.999))  // Handle divide by zero case
    );
}

vec3 blend_colorBurn(vec3 base, vec3 blend) {
    vec3 zeros = vec3(0.0);
    vec3 ones = vec3(1.0);
    return mix(
        zeros,
        ones - min(ones, (ones - base) / blend),
        step(zeros, blend)
    );
}

vec3 blend_hardLight(vec3 base, vec3 blend) {
    return mix(
        2.0 * base * blend,
        1.0 - 2.0 * (1.0 - base) * (1.0 - blend),
        step(0.5, blend)
    );
}

vec3 blend_vividLight(vec3 base, vec3 blend) {
    return mix(
        blend_colorBurn(base, 2.0 * blend),
        blend_colorDodge(base, 2.0 * (blend - 0.5)),
        step(0.5, blend)
    );
}

vec3 blend_linearLight(vec3 base, vec3 blend) {
    return mix(
        max(base + 2.0 * blend - 1.0, 0.0),
        min(base + 2.0 * (blend - 0.5), 1.0),
        step(0.5, blend)
    );
}

vec3 blend_pinLight(vec3 base, vec3 blend) {
    vec3 check = step(0.5, blend);
    vec3 darker = min(base, 2.0 * blend);
    vec3 lighter = max(base, 2.0 * (blend - 0.5));
    return mix(darker, lighter, check);
}

vec3 blend_hardMix(vec3 base, vec3 blend) {
    return step(1.0, base + blend);
}

vec3 blend_difference(vec3 base, vec3 blend) {
    return abs(base - blend);
}

vec3 blend_exclusion(vec3 base, vec3 blend) {
    return base + blend - 2.0 * base * blend;
}

vec3 blend_subtract(vec3 base, vec3 blend) {
    return max(base - blend, 0.0);
}

vec3 blend_divide(vec3 base, vec3 blend) {
    return base / (blend + M_EPSILON);
}

vec3 blend_hue(vec3 base, vec3 blend) {
    vec3 baseHSV = convert_rgb2hsv(base);
    vec3 blendHSV = convert_rgb2hsv(blend);
    return convert_hsv2rgb(vec3(blendHSV.x, baseHSV.y, baseHSV.z));
}

vec3 blend_saturation(vec3 base, vec3 blend) {
    vec3 baseHSV = convert_rgb2hsv(base);
    vec3 blendHSV = convert_rgb2hsv(blend);
    return convert_hsv2rgb(vec3(baseHSV.x, blendHSV.y, baseHSV.z));
}

vec3 blend_color(vec3 base, vec3 blend) {
    vec3 baseHSV = convert_rgb2hsv(base);
    vec3 blendHSV = convert_rgb2hsv(blend);
    return convert_hsv2rgb(vec3(blendHSV.xy, baseHSV.z));
}

vec3 blend_luminosity(vec3 base, vec3 blend) {
    float baseLum = color_luminance(base);
    float blendLum = color_luminance(blend);
    float lumDiff = blendLum - baseLum;
    return base + lumDiff;
}
