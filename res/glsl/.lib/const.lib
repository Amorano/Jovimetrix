//------------------------------------------------------------------------------
// CONSTANT
//------------------------------------------------------------------------------

#define M_EPSILON  1.0e-10            // zero value for float comparisons
#define M_TAU      6.283185307179586  // Tau (2 * Pi)
#define M_PI       3.141592653589793  // Pi
#define M_PI_2     1.570796326794896  // Pi divided by 2 (π/2)
#define M_PI_4     0.785398163397448  // Pi divided by 4 (π/4)
#define M_3PI_4    2.356194490192345  // 3 * Pi divided by 4 (3π/4)

#define M_PHI      1.618033988749895  // Golden ratio (φ)
#define M_PHI_INV  0.618033988749895  // Inverse of golden ratio (1/φ)
#define M_PHI_SQ   2.618033988749895  // Square of the golden ratio (φ^2)

#define M_E        2.718281828459045  // Euler's number (base of natural logarithm)
#define M_LOG2E    1.442695040888963  // Log base 2 of e
#define M_LOG10E   0.434294481903252  // Log base 10 of e
#define M_LN2      0.693147180559945  // Natural log of 2
#define M_LN10     2.302585092994046  // Natural log of 10

#define M_SQRT2    1.414213562373095  // Square root of 2
#define M_SQRT3    1.732050807568877  // Square root of 3
#define M_SQRT1_2  0.707106781186547  // 1 divided by square root of 2 (1/sqrt(2))
#define M_SQRT1_3  0.577350269189626  // 1 divided by square root of 3 (1/sqrt(3))

// PHYSICS
#define M_C        299792458.0        // Speed of light in meters per second (m/s)
#define M_G        9.80665            // Gravitational acceleration on Earth (m/s²)
#define M_PLANCK   6.62607015e-34     // Planck's constant (Js)
#define M_KB       1.380649e-23       // Boltzmann constant (J/K)
#define M_MASS_E   9.10938356e-31     // Mass of electron (kg)
#define M_CHARGE_E 1.602176634e-19    // Elementary charge (C)

// ANGLES
#define M_DEG2RAD 0.017453292519943   // Degree to radian conversion factor
#define M_RAD2DEG 57.29577951308232   // Radian to degree conversion factor

// Convert degrees to radians
#define DEG2RAD(deg) ((deg) * M_DEG2RAD)

// Convert radians to degrees
#define RAD2DEG(rad) ((rad) * M_RAD2DEG)

//------------------------------------------------------------------------------
// MACROS
//------------------------------------------------------------------------------

// Compute the 2D perpendicular vector (rotate 90 degrees)
#define PERPENDICULAR(v) (vec2(-(v).y, (v).x))

// Compute the normalized difference vector between two points
#define NORMALIZE_DIFF(a, b) (normalize((b) - (a)))
