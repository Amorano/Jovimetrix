//------------------------------------------------------------------------------
// COLOR
//------------------------------------------------------------------------------

#include .lib/convert.lib

#define M_GAMMA       2.2       // Standard gamma correction value
#define M_GAMMA_INV   0.4545    // 1.0 / 2.2 for inverse gamma
#define M_LUMA_R      0.2126    // Rec. 709 luma coefficients for red
#define M_LUMA_G      0.7152    // Rec. 709 luma coefficients for green
#define M_LUMA_B      0.0722    // Rec. 709 luma coefficients for blue

// =============================================================================
// PROTOTYPES
// =============================================================================

vec3 color_complementary(vec3 rgb);
vec3[3] color_triadic(vec3 rgb);
vec3[3] color_splitComplementary(vec3 rgb, float angle);
vec3[4] color_tetradic(vec3 rgb, float angle);
vec3[5] color_analogous(vec3 rgb, float angle);

vec3 color_duotone(vec3 rgb, vec3 dark, vec3 light);
vec3 color_vibrance(vec3 rgb, float amount);
vec3 color_levelAdjust(vec3 rgb, vec3 inBlack, vec3 inWhite, vec3 outBlack, vec3 outWhite);

float color_perceivedBrightness(vec3 rgb);
float color_colorfulness(vec3 rgb);
bool color_isNeutral(vec3 rgb, float threshold);

vec3 color_saturate(vec3 rgb, float adjustment);
vec3 color_brighten(vec3 rgb, float adjustment);
vec3 color_rotateHue(vec3 rgb, float angle);
vec3 color_tint(vec3 base, vec3 tintColor, float amount);
float color_luminance(vec3 rgb);
float color_contrastRatio(vec3 rgb1, vec3 rgb2);
float color_deltaE(vec3 lab1, vec3 lab2);

vec3 color_temperature(float temperature);
float color_estimateTemperature(vec3 rgb);
vec3 color_adjustTemperature(vec3 rgb, float currentTemp, float targetTemp);

vec3 color_posterize(vec3 rgb, float levels);
vec3 color_colorize(vec3 rgb, vec3 tint, float strength);
vec3 color_gammaAdjust(vec3 rgb, vec3 gamma);

bool color_isColorBlindSafe(vec3 rgb1, vec3 rgb2);
vec3 color_emphasizeForColorBlind(vec3 rgb);
vec3 color_simulateProtanopia(vec3 rgb);
vec3 color_simulateDeuteranopia(vec3 rgb);

vec3 color_gradient3(vec3 color1, vec3 color2, vec3 color3, float t);
vec3 color_smoothGradient(vec3 color1, vec3 color2, float t);
vec3 color_radialGradient(vec3 center, vec3 edge, vec2 uv, vec2 center_pos);

float color_checker(vec2 uv, float scale);
float color_halftone(vec2 uv, float value, float frequency, float angle);

vec3 color_toneSplit(vec3 rgb, vec3 shadows, vec3 midtones, vec3 highlights);
vec3 color_monochromatic(vec3 rgb, float offset);
vec3 color_weightedPalette(vec3 colors[4], vec4 weights);

vec3 color_grade(vec3 rgb, vec3 lift, vec3 gamma, vec3 gain);

//------------------------------------------------------------------------------
// COLOR HARMONY
//------------------------------------------------------------------------------

vec3 color_complementary(vec3 rgb) {
    vec3 hsv = convert_rgb2hsv(rgb);
    hsv.x = fract(hsv.x + 0.5);  // Rotate hue by 180 degrees
    return convert_hsv2rgb(hsv);
}

vec3[3] color_triadic(vec3 rgb) {
    vec3 hsv = convert_rgb2hsv(rgb);
    return vec3[3](
        rgb,
        convert_hsv2rgb(vec3(fract(hsv.x + 1.0/3.0), hsv.yz)),
        convert_hsv2rgb(vec3(fract(hsv.x + 2.0/3.0), hsv.yz))
    );
}

vec3[3] color_splitComplementary(vec3 rgb, float angle) {
    vec3 hsv = convert_rgb2hsv(rgb);
    return vec3[3](
        rgb,
        convert_hsv2rgb(vec3(fract(hsv.x + 0.5 - angle), hsv.yz)),
        convert_hsv2rgb(vec3(fract(hsv.x + 0.5 + angle), hsv.yz))
    );
}

vec3[4] color_tetradic(vec3 rgb, float angle) {
    vec3 hsv = convert_rgb2hsv(rgb);
    return vec3[4](
        rgb,
        convert_hsv2rgb(vec3(fract(hsv.x + 0.5), hsv.yz)),  // Complement
        convert_hsv2rgb(vec3(fract(hsv.x + angle), hsv.yz)), // Third color
        convert_hsv2rgb(vec3(fract(hsv.x + angle + 0.5), hsv.yz))  // Fourth color
    );
}

vec3[5] color_analogous(vec3 rgb, float angle) {
    vec3 hsv = convert_rgb2hsv(rgb);
    return vec3[5](
        convert_hsv2rgb(vec3(fract(hsv.x - angle*2.0), hsv.yz)),
        convert_hsv2rgb(vec3(fract(hsv.x - angle), hsv.yz)),
        rgb,
        convert_hsv2rgb(vec3(fract(hsv.x + angle), hsv.yz)),
        convert_hsv2rgb(vec3(fract(hsv.x + angle*2.0), hsv.yz))
    );
}

//------------------------------------------------------------------------------
// COLOR EFFECTS
//------------------------------------------------------------------------------

vec3 color_duotone(vec3 rgb, vec3 dark, vec3 light) {
    float lum = color_luminance(rgb);
    return mix(dark, light, lum);
}

vec3 color_vibrance(vec3 rgb, float amount) {
    float mx = max(max(rgb.r, rgb.g), rgb.b);
    float avg = dot(rgb, vec3(1.0/3.0));
    return mix(rgb, vec3(mx), (mx - avg) * (-amount * 3.0));
}

vec3 color_levelAdjust(vec3 rgb, vec3 inBlack, vec3 inWhite, vec3 outBlack, vec3 outWhite) {
    return outBlack + (rgb - inBlack) * (outWhite - outBlack) / (inWhite - inBlack);
}

//------------------------------------------------------------------------------
// COLOR ANALYSIS
//------------------------------------------------------------------------------

float color_perceivedBrightness(vec3 rgb) {
    // Uses perceived brightness formula
    return sqrt(
        rgb.r * rgb.r * 0.299 +
        rgb.g * rgb.g * 0.587 +
        rgb.b * rgb.b * 0.114
    );
}

float color_colorfulness(vec3 rgb) {
    vec3 hsv = convert_rgb2hsv(rgb);
    return hsv.y * hsv.z;
}

bool color_isNeutral(vec3 rgb, float threshold) {
    vec3 hsv = convert_rgb2hsv(rgb);
    return hsv.y < threshold;
}

//------------------------------------------------------------------------------
// GENERAL PURPOSE
//------------------------------------------------------------------------------

vec3 color_saturate(vec3 rgb, float adjustment) {
    vec3 hsv = convert_rgb2hsv(rgb);
    hsv.y *= adjustment;
    return convert_hsv2rgb(hsv);
}

vec3 color_brighten(vec3 rgb, float adjustment) {
    vec3 hsv = convert_rgb2hsv(rgb);
    hsv.z = clamp(hsv.z * adjustment, 0.0, 1.0);
    return convert_hsv2rgb(hsv);
}

vec3 color_rotateHue(vec3 rgb, float angle) {
    vec3 hsv = convert_rgb2hsv(rgb);
    hsv.x = fract(hsv.x + angle);
    return convert_hsv2rgb(hsv);
}

// Tints color towards another color by amount (0-1)
vec3 color_tint(vec3 base, vec3 tintColor, float amount) {
    return mix(base, tintColor * color_luminance(base), amount);
}

// Luminance calculation using Rec. 709 coefficients
float color_luminance(vec3 rgb) {
    return dot(rgb, vec3(M_LUMA_R, M_LUMA_G, M_LUMA_B));
}

// Contrast ratio calculation (WCAG)
float color_contrastRatio(vec3 rgb1, vec3 rgb2) {
    float l1 = color_luminance(rgb1);
    float l2 = color_luminance(rgb2);
    float brightest = max(l1, l2);
    float darkest = min(l1, l2);
    return (brightest + 0.05) / (darkest + 0.05);
}

// Perceptual color difference (simple delta E)
float color_deltaE(vec3 lab1, vec3 lab2) {
    return length(lab1 - lab2);
}

// Approximate blackbody radiation (temperature in Kelvin)
vec3 color_temperature(float temperature) {
    temperature = clamp(temperature, 1000.0, 40000.0) / 100.0;

    vec3 color = vec3(1.0);
    bool under66 = temperature <= 66.0;

    // Red
    color.r = under66 ? 1.0 :
        1.29293618606274509804 * pow(temperature - 60.0, -0.1332047592);

    // Green
    color.g = under66 ?
        0.39008157876901960784 * log(temperature) - 0.63184144378862745098 :
        1.12989086089529411765 * pow(temperature - 60.0, -0.0755148492);

    // Blue
    if(under66) {
        if(temperature <= 19.0)
            color.b = 0.0;
        else
            color.b = 0.54320678911019607843 * log(temperature - 10.0) - 1.19625408914;
    }

    return clamp(color, 0.0, 1.0);
}

float color_estimateTemperature(vec3 rgb) {
    // Approximate CCT using McCamy's formula
    float n = (rgb.x - rgb.z) / (rgb.y - rgb.z);
    return 449.0 * pow(n, 3.0) + 3525.0 * pow(n, 2.0) + 6823.3 * n + 5520.33;
}

vec3 color_adjustTemperature(vec3 rgb, float currentTemp, float targetTemp) {
    vec3 current = color_temperature(currentTemp);
    vec3 target = color_temperature(targetTemp);
    return rgb * (target / current);
}

vec3 color_posterize(vec3 rgb, float levels) {
    float numSteps = clamp(float(levels), 1.0, 255.0);
    return floor(rgb * numSteps + 0.0000001) / numSteps;
}

vec3 color_colorize(vec3 rgb, vec3 tint, float strength) {
    float luma = color_luminance(rgb);
    vec3 hsvTint = convert_rgb2hsv(tint);
    return convert_hsv2rgb(vec3(hsvTint.x, hsvTint.y * strength, luma));
}

vec3 color_gammaAdjust(vec3 rgb, vec3 gamma) {
    return pow(rgb, 1.0 / gamma);
}

bool color_isColorBlindSafe(vec3 rgb1, vec3 rgb2) {
    // Uses WCAG 2.0 guidelines for color contrast
    float contrast = color_contrastRatio(rgb1, rgb2);
    return contrast >= 4.5; // Minimum contrast for normal text
}

vec3 color_emphasizeForColorBlind(vec3 rgb) {
    // Enhances differences in color_luminance and saturation
    vec3 hsv = convert_rgb2hsv(rgb);
    hsv.y = pow(hsv.y, 0.5); // Boost saturation
    hsv.z = pow(hsv.z, 0.8); // Adjust value
    return convert_hsv2rgb(hsv);
}

// Simulate color blindness types
vec3 color_simulateProtanopia(vec3 rgb) {
    return rgb * mat3(
        0.567, 0.433, 0.000,
        0.558, 0.442, 0.000,
        0.000, 0.242, 0.758
    );
}

vec3 color_simulateDeuteranopia(vec3 rgb) {
    return rgb * mat3(
        0.625, 0.375, 0.000,
        0.700, 0.300, 0.000,
        0.000, 0.300, 0.700
    );
}

vec3 color_gradient3(vec3 color1, vec3 color2, vec3 color3, float t) {
    t = clamp(t, 0.0, 1.0);
    return t < 0.5 ?
        mix(color1, color2, t * 2.0) :
        mix(color2, color3, (t - 0.5) * 2.0);
}

vec3 color_smoothGradient(vec3 color1, vec3 color2, float t) {
    t = smoothstep(0.0, 1.0, t);
    return mix(color1, color2, t);
}

//------------------------------------------------------------------------------
// PATTERNS AND EFFECTS
//------------------------------------------------------------------------------

// Creates a gradient in polar coordinates
vec3 color_radialGradient(vec3 center, vec3 edge, vec2 uv, vec2 center_pos) {
    float dist = length(uv - center_pos);
    return mix(center, edge, smoothstep(0.0, 1.0, dist));
}

// Creates a checker pattern
float color_checker(vec2 uv, float scale) {
    vec2 pattern = floor(uv * scale);
    return mod(pattern.x + pattern.y, 2.0);
}

// Simulates halftone dot pattern
float color_halftone(vec2 uv, float value, float frequency, float angle) {
    vec2 rotated = vec2(
        cos(angle) * uv.x - sin(angle) * uv.y,
        sin(angle) * uv.x + cos(angle) * uv.y
    );
    vec2 nearest = 2.0 * fract(frequency * rotated) - 1.0;
    float dist = length(nearest);
    return step(dist, 2.0 * value - 1.0);
}

//------------------------------------------------------------------------------
// COLOR MODIFICATIONS
//------------------------------------------------------------------------------

// Adjust color based on shadows, midtones, and highlights separately
vec3 color_toneSplit(vec3 rgb, vec3 shadows, vec3 midtones, vec3 highlights) {
    float lum = color_luminance(rgb);
    float shadow = smoothstep(0.0, 0.5, lum);
    float highlight = smoothstep(0.5, 1.0, lum);
    vec3 mid = mix(shadows, midtones, shadow);
    return mix(mid, highlights, highlight);
}

// Create a monochromatic variation of a color
vec3 color_monochromatic(vec3 rgb, float offset) {
    vec3 hsv = convert_rgb2hsv(rgb);
    return convert_hsv2rgb(vec3(
        hsv.x,
        mix(0.0, hsv.y, 0.5 + offset),
        mix(0.3, 1.0, offset)
    ));
}

// Create a palette with weighted mix of colors
vec3 color_weightedPalette(vec3 colors[4], vec4 weights) {
    weights = weights / (weights.x + weights.y + weights.z + weights.w);
    return colors[0] * weights.x +
           colors[1] * weights.y +
           colors[2] * weights.z +
           colors[3] * weights.w;
}

// Advanced color grading
vec3 color_grade(vec3 rgb, vec3 lift, vec3 gamma, vec3 gain) {
    vec3 liftedColor = rgb * (1.0 - lift) + lift;
    vec3 gammaCorrected = pow(liftedColor, 1.0 / gamma);
    return gammaCorrected * gain;
}