//------------------------------------------------------------------------------
// CAMERA
//------------------------------------------------------------------------------

#import .lib/const.lib

// =============================================================================
// PROTOTYPES
// =============================================================================

vec3 camera_eye(float fov, vec2 size, vec2 pos);
mat3 camera_eye(vec3 pos, vec3 target, float roll);

//------------------------------------------------------------------------------
// TRANSFORM
//------------------------------------------------------------------------------

// Camera direction based on field of view and screen position
vec3 camera_eye(float fov, vec2 size, vec2 pos) {
    vec2 xy = pos - size * 0.5;
    float cot_half_fov = tan((90.0 - fov * 0.5) * M_DEG2RAD);
    float z = size.y * 0.5 * cot_half_fov;
    return normalize(vec3(xy, -z));
}

// Camera view based on eye, target, and roll angle
mat3 camera_eye(vec3 pos, vec3 target, float roll)
{
    vec3 cw = normalize(target-pos);
    vec3 cp = vec3(sin(roll), cos(roll),0.0);
    vec3 cu = normalize( cross(cw,cp) );
    vec3 cv = normalize( cross(cu,cw) );
    return mat3(cu, cv, cw);
}