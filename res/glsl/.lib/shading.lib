//------------------------------------------------------------------------------
// SHADING
//------------------------------------------------------------------------------

#import .lib/const.lib

// =============================================================================
// PROTOTYPES
// =============================================================================

vec3 shading_fresnel(vec3 F0, vec3 h, vec3 l);          // Computes the Fresnel reflection factor
vec3 shading_phong_light(vec3 pos, vec3 color);         //
vec3 shading_phong(vec3 v, vec3 n, vec3 dir, vec3 eye); // Computes Phong shading for a given point

// =============================================================================
// PHONG
// =============================================================================

// Computes the Fresnel reflection factor
vec3 shading_fresnel(vec3 F0, vec3 h, vec3 l) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - dot(h, l), 0.0, 1.0), 5.0);
}

vec3 shading_phong_light(vec3 pos, vec3 color) {
    vec3 vl = normalize(pos - v);
    vec3 diffuse = Kd * vec3(max(0.0, dot(vl, n)));
    vec3 specular = vec3(max(0.0, dot(vl, ref)));
    vec3 F = shading_fresnel(Ks, normalize(vl - dir), vl);
    specular = pow(specular, vec3(shininess));
    return color * mix(diffuse, specular, F);
}

// Computes Phong shading for a given point
vec3 shading_phong(vec3 v, vec3 n, vec3 dir, vec3 eye) {
    vec3 final = vec3(0.0);

    // Define material properties
    float shininess = 16.0;
    vec3 ref = reflect(dir, n);
    vec3 Ks = vec3(0.5);
    vec3 Kd = vec3(1.0);

    // Light 0
    {
        vec3 light_pos = vec3(20.0, 20.0, 20.0);
        vec3 light_color = vec3(1.0, 0.7, 0.7);
        final += shading_phong_light(light_pos, light_color);
    }

    // Light 1
    {
        vec3 light_pos = vec3(-20.0, -20.0, -30.0);
        vec3 light_color = vec3(0.5, 0.7, 1.0);
        final += shading_phong_light(light_pos, light_color);
    }
    return final;
}